#! /bin/bash -u

if [ $# -ne 3 ]; then
  echo "usage:  git-sync <url> <branch> <where>"
  exit 2
fi

URL=$1
BRANCH=$2
WHERE=$3

ARCHIVE=${HOME}/.git-sync-archive-3
CLONEARC=${ARCHIVE}/`basename $WHERE`
CONFIG=${HOME}/.git-sync-config

if [ if grep 'AUTO_UPDATE=off' ${CONFIG} ]; then
    echo "Git sync has been turned off in ${CONFIG}. Exiting."
    exit 0
fi

if [ ! -d ${ARCHIVE} ]; then
    echo "No archive directory found at ${ARCHIVE}.  Creating."
    mkdir -p ${ARCHIVE}
fi

if [ ! -L ${HOME}/notebook-archive ]; then
    ln -s ${ARCHIVE} ${HOME}/notebook-archive
fi

if [ ! -d ${CLONEARC} ]; then  # not archived
    if [ -d ${WHERE} ]; then # clone exists
        echo "Archiving old repo ${WHERE} at ${CLONEARC}."
        mv ${WHERE} ${ARCHIVE}
    else # URL was never downloaded,  fake an archive
        echo "Faking archive for ${URL} since no clone found at ${WHERE}."
        mkdir -p ${CLONEARC}  # make a fake archive
    fi
else
    echo "Existing archive found for ${URL} at ${CLONEARC}."
fi

if [ -d ${WHERE} ]; then  # Already re-cloned
    echo "Updating existing clone ${WHERE} from ${URL} at branch ${BRANCH}."
    if [ ! -w ${WHERE} ]; then  # first time run after v2 readonly dirs
        echo "First time v2 -> v3 conversion to writable directories."
        find ${WHERE} -type d -exec chmod 755 {} +  # make dirs writable for user
    fi
    find ${WHERE} -type f -exec chmod 644 {} +  # make files writable for git
    git config --global --add safe.directory ${WHERE}
    cd ${WHERE}
    git fetch origin
    git reset HEAD
    git checkout -- .
    git checkout origin/${BRANCH}
else  # First clone after archiving
    echo "No existing clone found.  Cloning ${WHERE} from ${URL} at branch ${BRANCH}."
    cd ${HOME}
    git clone --single-branch --branch ${BRANCH} ${URL} ${WHERE}
fi

find ${WHERE} -type f -exec chmod 444 {} +   # make files (but not dirs) readonly

mkdir -p $HOME/.tmp

cd $WHERE
find . -type f | sort >$HOME/.tmp/all_files
find . -type d | sort >$HOME/.tmp/all_dirs

git status --porcelain | grep '^??' | cut -c4- | sort >$HOME/.tmp/user_added_things

git status --porcelain | grep '^??' | cut -c4- | grep '/$' | xargs find | grep -v '/$' >$HOME/.tmp/user_added_files

find /dir -name '*.gz' | sort >everything_sorted
sort skip_files >skip_files_sorted
comm -23 everything_sorted skip_files_sorted | xargs . . . etc