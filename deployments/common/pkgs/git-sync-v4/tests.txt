>>> import os
>>> import logging
>>> import re
>>> import doctest

>>> import tests
>>> import git_sync_v4 as gs
>>> from git_sync_v4 import shell, all_files, all_dirs, Syncer, FilePath, DirPath, PosixPath,  main
>>> from git_sync_v4 import SortedSet, dump_set, list_git_tree, classify_git_status_line

-------------------------------------------------------------------------------

Clean up any old test artifacts before starting.

>>> _ = shell(tests.CLEANUP_SCRIPT, capture_output=True)

Init the logger:

>>> gs.log = gs.Log("gs.log")
>>> gs.log.set_level("DEBUG")

>>> where = DirPath("someplace-else")
>>> where.mkdir()
>>> what = where / FilePath('gs.log')
>>> gs.log.moveto(what)
>>> what.exists() and what.is_file()
True

>>> gs.log = gs.Log("gs.log")
>>> gs.log.set_level("DEBUG")
>>> gs.log.moveto(what)

>>> gs.log.info("It's working!")
INFO - It's working!

>>> gs.log.warning("Test warning.")
WARN - Test warning.

>>> gs.log.error("Test error.")
ERROR - Test error.

>>> gs.log.critical("Test critical.")
CRITICAL - Test critical.

-------------------------------------------------------------------------------

Sorted Set tests

>>> [ x for x in SortedSet([4,5,3,2,6,1,7,1,2])]
[1, 2, 3, 4, 5, 6, 7]

>>> SortedSet([4,5,3,2,6,1,7,1,2]) - SortedSet([2,7])
SortedSet([1, 3, 4, 5, 6])

>>> SortedSet([4,5,3,2,6,1]) | SortedSet([2,7])
SortedSet([1, 2, 3, 4, 5, 6, 7])

>>> SortedSet([4,5,3,2,6,1]) & SortedSet([2,7])
SortedSet([2])

>>> SortedSet([4,5,3,2,6,1]) ^ SortedSet([2,7])
SortedSet([1, 3, 4, 5, 6, 7])

>>> DirPath("references/sync-test-ref") in SortedSet([DirPath("references/sync-test-ref")])
True

>>> FilePath("references/sync-test-ref/test.txt") in SortedSet([FilePath("references/sync-test-ref/test.txt")])
True

>>> DirPath("references/sync-test-ref") in SortedSet([DirPath("references/sync-test-ref-1")])
False

>>> FilePath("references/sync-test-ref/test.txt.1") in SortedSet([FilePath("references/sync-test-ref/test.txt")])
False



-------------------------------------------------------------------------------

Test the timestamp function,  now an 8 digit hex number,  secs since 1970

>>> bool(re.match("^[a-f0-9]{8,8}$", gs.now()))
True

-------------------------------------------------------------------------------

Fake out the timestamp function to return a constant value for repeatable tests:

>>> gs.now = lambda: "12345678"
>>> gs.now()
'12345678'

-------------------------------------------------------------------------------

Check the subprocess multi-line shellscript function:

>>> shell("echo hello world!").stdout
'hello world!\n'

-------------------------------------------------------------------------------

Note that an err'ing subprocess will raise an exception:

>>> shell("fecho hello world!").stdout
Traceback (most recent call last):
...
subprocess.CalledProcessError: Command '('/bin/bash', '...')' returned non-zero exit status 127.

-------------------------------------------------------------------------------

Note that an err'ing subprocess will raise an exception,  unless check=False.

>>> shell("fecho hello world!", check=False).stdout
''

-------------------------------------------------------------------------------

Multi-command process with mid-file error:  (nominally shell_settings='set -eux -o pipefail\n\n')

>>> shell(r"echo '1'; echo '2';  fecho '3'; echo '4'").stdout
Traceback (most recent call last):
...
subprocess.CalledProcessError: Command '('/bin/bash', '...')' returned non-zero exit status 127.


-------------------------------------------------------------------------------

Multi-command process with mid-file error but shell_settings='':  (default bash settings)

>>> print(shell(r"echo '1'; echo '2';  fecho '3'; echo '4'", shell_settings="").stdout, end='')
1
2
4

-------------------------------------------------------------------------------

Run these tests from TEST_DIR giving a known input and output dir:

>>> os.chdir(os.environ['TEST_DIR'])


-------------------------------------------------------------------------------

Run the script from tests.py which creates a test directory repo and
modifies it with various forms of user malfeasance:

>>> _ = shell(tests.INIT_SCRIPT, capture_output=True)


-------------------------------------------------------------------------------

Check the DirPath / FilePath concatenation cases:

>>> DirPath("references/sync-test-ref") / DirPath("subdir")
DirPath('references/sync-test-ref/subdir')

>>> DirPath("references/sync-test-ref") / "new-dir"
DirPath('references/sync-test-ref/new-dir')

Check the FilePath cases:

>>> "references/sync-test-ref" / FilePath("readme.txt")
FilePath('references/sync-test-ref/readme.txt')

>>> DirPath("references/sync-test-ref") / "README.md"
FilePath('references/sync-test-ref/README.md')

>>> DirPath("references/sync-test-ref") / FilePath("README.md")
FilePath('references/sync-test-ref/README.md')

Check some invalid cases:

>>> FilePath("references/sync-test-ref") / FilePath("README.md")
Traceback (most recent call last):
...
ValueError: Cannot concatenate: references/sync-test-ref / README.md

>>> 1 / DirPath("references/sync-test-ref")
Traceback (most recent call last):
...
TypeError: unsupported operand type(s) for /: 'int' and 'DirPath'

>>> DirPath("references/sync-test-ref") / 1
Traceback (most recent call last):
...
ValueError: Cannot concatenate: DirPath('references/sync-test-ref') / 1

>>> 1 / FilePath("test")
Traceback (most recent call last):
...
TypeError: unsupported operand type(s) for /: 'int' and 'FilePath'

>>> FilePath("somewhere/the_file.txt") / ".bak"
FilePath('somewhere/the_file.txt.bak')

>>> DirPath("somewhere") / PosixPath("some-subdir")
DirPath('somewhere/some-subdir')


-------------------------------------------------------------------------------

Check early and simply that the all_xxx functions do not crash:

>>> files = all_files("references/sync-test-ref")
>>> assert FilePath("poison-dir/poison-file-2.txt") not in files

>>> dirs = all_dirs("references/sync-test-ref")

-------------------------------------------------------------------------------

Simulate a repo checkout with some additional user modifications

>>> _ = shell(tests.INIT_SCRIPT)
>>> s = Syncer(tests.REPO_URL, "references/sync-test-ref", "main", "./test")
>>> s.detoxify_repo()
DEBUG - Detoxifying
DEBUG - Collecting all dirs and files.

-------------------------------------------------------------------------------

get_parsed_clone_status runs git status to determine files affected by
the user and to report them in normalized form for farming out actions later:

>>> clone_status = s.get_parsed_clone_status()
DEBUG - git status:
  D LICENSE
 M README.md
A  added.txt
 M change-mode.md
R  rename-me.txt -> renamed-me.txt
?? blocker-dir/
?? blocker-file
?? copy-me-2.txt
?? made-up-file.ipynb
?? new-dir/
?? poison-dir/
?? poison-file.txt
?? rw_to_poison.dir/user_file.txt
<BLANKLINE>

-------------------------------------------------------------------------------

The syncer interprets clone status to identify and process files appropriately,
but here we just dump the parsing without acting on it:

>>> for line in clone_status: print(line)
('deleted', FilePath('LICENSE'))
('modified', FilePath('README.md'))
('added', FilePath('added.txt'))
('modified', FilePath('change-mode.md'))
('renamed', FilePath('renamed-me.txt'))
('untracked', DirPath('blocker-dir'))
('untracked', FilePath('blocker-file'))
('untracked', FilePath('copy-me-2.txt'))
('untracked', FilePath('made-up-file.ipynb'))
('untracked', DirPath('new-dir'))
('untracked', DirPath('poison-dir'))
('untracked', FilePath('poison-file.txt'))
('untracked', FilePath('rw_to_poison.dir/user_file.txt'))

>>> s.repo_dir
DirPath('references/sync-test-ref')

>>> s.branch
'main'

>>> oct(FilePath('references/sync-test-ref/new-dir/made-up-1.txt').stat().st_mode)
'0o100777'

-------------------------------------------------------------------------------

Based on the INIT_SCRIPT above the classifier should return:

>>> s.prepare_for_update()
DEBUG - Detoxifying
DEBUG - Collecting all dirs and files.
DEBUG - git status:
  D LICENSE
 M README.md
A  added.txt
 M change-mode.md
R  rename-me.txt -> renamed-me.txt
?? blocker-dir/
?? blocker-file
?? copy-me-2.txt
?? made-up-file.ipynb
?? new-dir/
?? poison-dir/
?? poison-file.txt
?? rw_to_poison.dir/user_file.txt
<BLANKLINE>
DEBUG - Classifying clone git status and backing up user artifacts.
DEBUG - Classified LICENSE as deleted.
DEBUG - Classified README.md as modified.
DEBUG - Moved references/sync-test-ref/README.md to backup references/sync-test-ref/.gsv4-backups/README.md
DEBUG - Classified added.txt as added.
DEBUG - Moved references/sync-test-ref/added.txt to backup references/sync-test-ref/.gsv4-backups/added.txt
DEBUG - Classified change-mode.md as modified.
DEBUG - Moved references/sync-test-ref/change-mode.md to backup references/sync-test-ref/.gsv4-backups/change-mode.md
DEBUG - Classified renamed-me.txt as renamed.
DEBUG - Moved references/sync-test-ref/renamed-me.txt to backup references/sync-test-ref/.gsv4-backups/renamed-me.txt
DEBUG - Classified blocker-dir as untracked.
DEBUG - Moved references/sync-test-ref/blocker-dir to backup references/sync-test-ref/.gsv4-backups/blocker-dir
DEBUG - Classified blocker-file as untracked.
DEBUG - Moved references/sync-test-ref/blocker-file to backup references/sync-test-ref/.gsv4-backups/blocker-file
DEBUG - Classified copy-me-2.txt as untracked.
DEBUG - Moved references/sync-test-ref/copy-me-2.txt to backup references/sync-test-ref/.gsv4-backups/copy-me-2.txt
DEBUG - Classified made-up-file.ipynb as untracked.
DEBUG - Moved references/sync-test-ref/made-up-file.ipynb to backup references/sync-test-ref/.gsv4-backups/made-up-file.ipynb
DEBUG - Classified new-dir as untracked.
DEBUG - Moved references/sync-test-ref/new-dir to backup references/sync-test-ref/.gsv4-backups/new-dir
DEBUG - Classified poison-dir as untracked.
DEBUG - Moved references/sync-test-ref/poison-dir to backup references/sync-test-ref/.gsv4-backups/poison-dir
DEBUG - Classified poison-file.txt as untracked.
DEBUG - Moved references/sync-test-ref/poison-file.txt to backup references/sync-test-ref/.gsv4-backups/poison-file.txt
DEBUG - Classified rw_to_poison.dir/user_file.txt as untracked.
DEBUG - Moved references/sync-test-ref/rw_to_poison.dir/user_file.txt to backup references/sync-test-ref/.gsv4-backups/rw_to_poison.dir/user_file.txt

-------------------------------------------------------------------------------

>>> s.perform_update()
DEBUG - Fetching https://github.com/spacetelescope/sync-test
DEBUG - Resetting and updating.

>>> s.finalize_update()
INFO - Restoring backups.
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/README.md to references/sync-test-ref/README.md.12345678
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/added.txt to references/sync-test-ref/added.txt
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/blocker-dir to references/sync-test-ref/blocker-dir.12345678
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/blocker-file to references/sync-test-ref/blocker-file.12345678
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/change-mode.md to references/sync-test-ref/change-mode.md.12345678
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/copy-me-2.txt to references/sync-test-ref/copy-me-2.txt
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/made-up-file.ipynb to references/sync-test-ref/made-up-file.ipynb
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/new-dir to references/sync-test-ref/new-dir
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/poison-dir to references/sync-test-ref/poison-dir
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/poison-file.txt to references/sync-test-ref/poison-file.txt
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/renamed-me.txt to references/sync-test-ref/renamed-me.txt
DEBUG - Restoring backup references/sync-test-ref/.gsv4-backups/rw_to_poison.dir/user_file.txt to references/sync-test-ref/rw_to_poison.dir/user_file.txt
DEBUG - Clearing backup directory references/sync-test-ref/.gsv4-backups


>>> s.validate_clone()
DEBUG - git status:
 ?? README.md.12345678
?? added.txt
?? blocker-dir.12345678/
?? blocker-file.12345678
?? change-mode.md.12345678
?? copy-me-2.txt
?? made-up-file.ipynb
?? new-dir/
?? poison-dir/
?? poison-file.txt
?? renamed-me.txt
?? rw_to_poison.dir/user_file.txt
<BLANKLINE>

>>> s.get_all_artifacts()
DEBUG - Collecting all dirs and files.

>>> s.dump_sets()
DEBUG - All dirs::
DEBUG -     references/sync-test-ref/blocker-dir
DEBUG -     references/sync-test-ref/blocker-dir.12345678
DEBUG -     references/sync-test-ref/new-dir
DEBUG -     references/sync-test-ref/new-dir/sub-dir
DEBUG -     references/sync-test-ref/poison-dir
DEBUG -     references/sync-test-ref/poison-dir/poison-dir-2
DEBUG -     references/sync-test-ref/poison.dir
DEBUG -     references/sync-test-ref/rw_to_poison.dir
DEBUG - All files::
DEBUG -     references/sync-test-ref/LICENSE
DEBUG -     references/sync-test-ref/README.md
DEBUG -     references/sync-test-ref/README.md.12345678
DEBUG -     references/sync-test-ref/added.txt
DEBUG -     references/sync-test-ref/blocker-dir/placeholder.txt
DEBUG -     references/sync-test-ref/blocker-dir.12345678/placeholder-2.txt
DEBUG -     references/sync-test-ref/blocker-file
DEBUG -     references/sync-test-ref/blocker-file.12345678
DEBUG -     references/sync-test-ref/change-mode.md
DEBUG -     references/sync-test-ref/change-mode.md.12345678
DEBUG -     references/sync-test-ref/change.txt
DEBUG -     references/sync-test-ref/copy-me-2.txt
DEBUG -     references/sync-test-ref/copy-me.txt
DEBUG -     references/sync-test-ref/made-up-file.ipynb
DEBUG -     references/sync-test-ref/new-dir/made-up-1.txt
DEBUG -     references/sync-test-ref/new-dir/sub-dir/made-up-2.txt
DEBUG -     references/sync-test-ref/poison-dir/poison-dir-2/poison-file-2.txt
DEBUG -     references/sync-test-ref/poison-dir/poison-file.txt
DEBUG -     references/sync-test-ref/poison-file.txt
DEBUG -     references/sync-test-ref/poison.dir/unchanged.txt
DEBUG -     references/sync-test-ref/rename-me.txt
DEBUG -     references/sync-test-ref/renamed-me.txt
DEBUG -     references/sync-test-ref/rw_to_poison.dir/normal.txt
DEBUG -     references/sync-test-ref/rw_to_poison.dir/user_file.txt
DEBUG -     references/sync-test-ref/rw_to_ro.txt
DEBUG -     references/sync-test-ref/setup.sh
DEBUG -     references/sync-test-ref/unchanged.txt
DEBUG - User dirs::
DEBUG -     references/sync-test-ref/blocker-dir.12345678
DEBUG -     references/sync-test-ref/new-dir
DEBUG -     references/sync-test-ref/new-dir/sub-dir
DEBUG -     references/sync-test-ref/poison-dir
DEBUG -     references/sync-test-ref/poison-dir/poison-dir-2
DEBUG - User files::
DEBUG -     references/sync-test-ref/README.md.12345678
DEBUG -     references/sync-test-ref/added.txt
DEBUG -     references/sync-test-ref/blocker-dir.12345678/placeholder-2.txt
DEBUG -     references/sync-test-ref/blocker-file.12345678
DEBUG -     references/sync-test-ref/change-mode.md.12345678
DEBUG -     references/sync-test-ref/copy-me-2.txt
DEBUG -     references/sync-test-ref/made-up-file.ipynb
DEBUG -     references/sync-test-ref/new-dir/made-up-1.txt
DEBUG -     references/sync-test-ref/new-dir/sub-dir/made-up-2.txt
DEBUG -     references/sync-test-ref/poison-dir/poison-dir-2/poison-file-2.txt
DEBUG -     references/sync-test-ref/poison-dir/poison-file.txt
DEBUG -     references/sync-test-ref/poison-file.txt
DEBUG -     references/sync-test-ref/renamed-me.txt
DEBUG -     references/sync-test-ref/rw_to_poison.dir/user_file.txt
DEBUG - Git dirs::
DEBUG -     references/sync-test-ref/blocker-dir
DEBUG -     references/sync-test-ref/poison.dir
DEBUG -     references/sync-test-ref/rw_to_poison.dir
DEBUG - Git files::
DEBUG -     references/sync-test-ref/LICENSE
DEBUG -     references/sync-test-ref/README.md
DEBUG -     references/sync-test-ref/blocker-dir/placeholder.txt
DEBUG -     references/sync-test-ref/blocker-file
DEBUG -     references/sync-test-ref/change-mode.md
DEBUG -     references/sync-test-ref/change.txt
DEBUG -     references/sync-test-ref/copy-me.txt
DEBUG -     references/sync-test-ref/poison.dir/unchanged.txt
DEBUG -     references/sync-test-ref/rename-me.txt
DEBUG -     references/sync-test-ref/rw_to_poison.dir/normal.txt
DEBUG -     references/sync-test-ref/rw_to_ro.txt
DEBUG -     references/sync-test-ref/setup.sh
DEBUG -     references/sync-test-ref/unchanged.txt

>>> s.lock_clone()
INFO - Locking clone references/sync-test-ref: files r/o,  dirs r/w.
DEBUG - Opening directory references/sync-test-ref/blocker-dir for writing.
DEBUG - Opening directory references/sync-test-ref/poison.dir for writing.
DEBUG - Opening directory references/sync-test-ref/rw_to_poison.dir for writing.
DEBUG - Locking file references/sync-test-ref/LICENSE.
DEBUG - Locking file references/sync-test-ref/README.md.
DEBUG - Locking file references/sync-test-ref/blocker-dir/placeholder.txt.
DEBUG - Locking file references/sync-test-ref/blocker-file.
DEBUG - Locking file references/sync-test-ref/change-mode.md.
DEBUG - Locking file references/sync-test-ref/change.txt.
DEBUG - Locking file references/sync-test-ref/copy-me.txt.
DEBUG - Locking file references/sync-test-ref/poison.dir/unchanged.txt.
DEBUG - Locking file references/sync-test-ref/rename-me.txt.
DEBUG - Locking file references/sync-test-ref/rw_to_poison.dir/normal.txt.
DEBUG - Locking file references/sync-test-ref/rw_to_ro.txt.
DEBUG - Locking file references/sync-test-ref/setup.sh.
DEBUG - Locking file references/sync-test-ref/unchanged.txt.

>>> s.add_sync_instructions()
>>> assert (s.repo_dir / "SYNC-INSTRUCTIONS.md").exists()
>>> assert (s.repo_dir.parent / "SYNC-INSTRUCTIONS.md").exists()

>>> oct(FilePath('references/sync-test-ref/new-dir/made-up-1.txt').stat().st_mode)
'0o100777'

-------------------------------------------------------------------------------------

specifically check for bad status code in git status --porcelain output

>>> bad_status = "XX broken_file"
>>> classify_git_status_line(bad_status)
('unknown', FilePath('broken_file'))

-------------------------------------------------------------------------------

Start worrying less about logging and just check results:

>>> gs.log.set_level("DEBUG")

-------------------------------------------------------------------------------

Test basic sync with no existing clone

>>> _ = shell(tests.CLEANUP_SCRIPT)
>>> main(["./test", tests.REPO_URL, "main", "references/sync-test-ref"]) # doctest: +ELLIPSIS
INFO - Syncing Syncer(repo_url='https://github.com/spacetelescope/sync-test', repo_dir='references/sync-test-ref', branch='main')
INFO - Creating new clone.
INFO - Validating...
INFO - Locking clone references/sync-test-ref: files r/o,  dirs r/w.
INFO - Sync complete.
0

Test basic sync with existing clone

>>> _ = shell(tests.INIT_SCRIPT)
>>> main(["./test", tests.REPO_URL, "main", "references/sync-test-ref"]) # doctest: +ELLIPSIS
INFO - Syncing Syncer(repo_url='https://github.com/spacetelescope/sync-test', repo_dir='references/sync-test-ref', branch='main')
INFO - Updating existing clone.
INFO - Restoring backups.
INFO - Validating...
INFO - Locking clone references/sync-test-ref: files r/o,  dirs r/w.
INFO - Sync complete.
0

-------------------------------------------------------------------------------

Test opt-out system for turning off syncs:

>>> _ = shell(tests.CLEANUP_SCRIPT)
>>> gate = f"{os.environ['HOME']}/.git-sync-off"
>>> with open(gate, "w+") as f:  _ = f.write("\n")
>>> main(["./test",  tests.REPO_URL, "main", "references/sync-test-ref"]) # doctest: +ELLIPSIS
INFO - git-sync is disabled by file .../.git-sync-off.
INFO - Remove .git-sync-off to restore syncing.
0
>>> os.remove(gate)

-------------------------------------------------------------------------------

Check clone blocked by file

>>> _ = shell(tests.CLEANUP_SCRIPT)
>>> _ = shell("mkdir references; echo 'Not a git repo.' >references/sync-test-ref")
>>> main(["./test", tests.REPO_URL, "main", "references/sync-test-ref"]) # doctest: +ELLIPSIS
INFO - Syncing Syncer(repo_url='https://github.com/spacetelescope/sync-test', repo_dir='references/sync-test-ref', branch='main')
INFO - Updating existing clone.
INFO - Updating failed, falling back...
INFO - Backing up existing clone to references/sync-test-ref.12345678 and re-cloning.
INFO - Creating new clone.
INFO - Locking clone references/sync-test-ref: files r/o,  dirs r/w.
INFO - Sync complete.
0

-------------------------------------------------------------------------------

Check clone with trashed .git dir

>>> _ = shell(tests.INIT_SCRIPT)
>>> _ = shell("rm -rf references/sync-test-ref/.git")
>>> main(["./test", tests.REPO_URL, "main", "references/sync-test-ref"]) # doctest: +ELLIPSIS
INFO - Syncing Syncer(repo_url='https://github.com/spacetelescope/sync-test', repo_dir='references/sync-test-ref', branch='main')
INFO - Updating existing clone.
INFO - Updating failed, falling back...
INFO - Backing up existing clone to references/sync-test-ref.12345678 and re-cloning.
INFO - Creating new clone.
INFO - Locking clone references/sync-test-ref: files r/o,  dirs r/w.
INFO - Sync complete.
0

-------------------------------------------------------------------------------

Check clone with bad dir perms works:

>>> _ = shell(tests.INIT_SCRIPT)
>>> os.chmod("references/sync-test-ref", 0o000)
>>> main(["./test", tests.REPO_URL, "main", "references/sync-test-ref"]) # doctest: +ELLIPSIS
INFO - Syncing Syncer(repo_url='https://github.com/spacetelescope/sync-test', repo_dir='references/sync-test-ref', branch='main')
INFO - Updating existing clone.
INFO - Restoring backups.
INFO - Validating...
INFO - Locking clone references/sync-test-ref: files r/o,  dirs r/w.
INFO - Sync complete.
0

-------------------------------------------------------------------------------

Check clone on bad branch with bad origin works:

>>> _ = shell(f"git fetch origin;  git checkout wrong-branch", cwd=s.repo_dir)
>>> _ = shell(f"git remote rename origin foo", cwd=s.repo_dir)
>>> s = Syncer(tests.REPO_URL, "references/sync-test-ref", "main", "./test")
>>> s.sync()   # doctest: +ELLIPSIS
INFO - Syncing Syncer(repo_url='https://github.com/spacetelescope/sync-test', repo_dir='references/sync-test-ref', branch='main')
INFO - Updating existing clone.
INFO - Restoring backups.
INFO - Validating...
INFO - Locking clone references/sync-test-ref: files r/o,  dirs r/w.
INFO - Sync complete.

-------------------------------------------------------------------------------

Monkey patch s.sync to exercise exception handling in main():

>>> def fail(self): raise RuntimeError("Syncing failed for some reason.")

>>> temp = Syncer.sync
>>> Syncer.sync = fail
>>> main(["./test", tests.REPO_URL, "main", "references/sync-test-ref"]) # doctest: +ELLIPSIS
ERROR - Failed to sync:
Traceback (most recent call last):
...
RuntimeError: Syncing failed for some reason.
1
>>> Syncer.sync = temp

-------------------------------------------------------------------------------

Clean up sync-test directory and test files if all goes well:

>>> _ = shell(tests.CLEANUP_SCRIPT)
