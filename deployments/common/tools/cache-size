#! /usr/bin/env python

"""Print out the size of the astropy cache in human/engineering notation."""

import subprocess


def run(cmd, cwd=".", timeout=120):
    """Run subprocess `cmd` in dir `cwd` failing if not completed within `timeout` seconds
    of if `cmd` returns a non-zero exit status.

    Returns both stdout+stderr from `cmd`.
    """
    # print("Running command:", cmd.split())
    result = subprocess.run(
        cmd.split(),
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        check=True,
        cwd=cwd,
        timeout=timeout,
    )  # maybe succeeds
    return result.stdout


def path_size(path):
    outlines = run(f"du -c {path}").splitlines()
    return int(outlines[-1].split()[0])


def human_format_number(number):
    """Reformat `number` by switching to engineering units and dropping to two fractional digits,
    10s of megs for G-scale files.
    """
    convert = [
        (2**40, "T"),
        (2**30, "G"),
        (2**20, "M"),
        (2**10, "K"),
    ]
    for limit, sym in convert:
        if isinstance(number, (float, int)) and number > limit:
            number /= limit
            break
    else:
        sym = ""
    if isinstance(number, int):
        # numstr = "%d" % number
        numstr = "{}".format(number)
    else:
        numstr = "{:0.1f}{}".format(number, sym)
    return "{!s:>7}".format(numstr)


def get_lk_size():
    """Return size of the lightkurve cache in bytes."""
    import lightkurve.config

    lk_cache = lightkurve.config.get_cache_dir()
    return path_size(lk_cache)


def get_ap_size():
    """Return size of the astropy cache in bytes."""
    import astropy.utils.data

    return astropy.utils.data.cache_total_size()


def cache_total():
    """Returned combined size of all tracked caches."""
    return get_lk_size() + get_ap_size()


if __name__ == "__main__":
    print(human_format_number(cache_total()))
