{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "65797402-e16b-4a78-8acc-02dd90ca5e7d",
   "metadata": {},
   "source": [
    "# Aperture Photometry\n",
    "\n",
    "This is a proof-of-concept showing how to use Imviz to perform simple aperture photometry using hand-drawn aperture on a single object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3ad56d9d-a52f-446b-9d3f-b823d930cb2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "import time\n",
    "\n",
    "from astropy.utils.data import download_file\n",
    "from regions import CirclePixelRegion, RectanglePixelRegion, PixCoord\n",
    "\n",
    "from jdaviz import Imviz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "393b3fe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "imviz = Imviz()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61eee0ab",
   "metadata": {},
   "source": [
    "We can load JWST images with ASDF and GWCS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "66ca7067-6f89-446c-b1ca-53c46827af1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "jwf277w = download_file('https://stsci.box.com/shared/static/iao1zxtigyrhq7k3wtu5nchrxzlhj9kv.fits', cache=True)\n",
    "jwf444w = download_file('https://stsci.box.com/shared/static/rey83o5wq6g7qd7xym6r1jq9wlsxaqnt.fits', cache=True)\n",
    "\n",
    "my_aper = CirclePixelRegion(center=PixCoord(x=1002, y=1154), radius=20)\n",
    "my_bg = RectanglePixelRegion(center=PixCoord(x=925, y=1152), width=20, height=20)\n",
    "my_zoom = 4\n",
    "\n",
    "imviz.load_data(jwf277w, data_label='JWST_F277W')\n",
    "imviz.load_data(jwf444w, data_label='JWST_F444W')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "564c06c8",
   "metadata": {},
   "source": [
    "Or we can load HST/ACS images with FITS WCS."
   ]
  },
  {
   "cell_type": "raw",
   "id": "d90b822e",
   "metadata": {},
   "source": [
    "acs_47tuc_1 = download_file('https://mast.stsci.edu/api/v0.1/Download/file?uri=mast:HST/product/jbqf03gjq_flc.fits', cache=True)\n",
    "acs_47tuc_2 = download_file('https://mast.stsci.edu/api/v0.1/Download/file?uri=mast:HST/product/jbqf03h1q_flc.fits', cache=True)\n",
    "\n",
    "my_aper = CirclePixelRegion(center=PixCoord(x=1090, y=1157), radius=10)\n",
    "my_bg = RectanglePixelRegion(center=PixCoord(x=1029, y=1138), width=20, height=20)\n",
    "my_zoom = 6\n",
    "\n",
    "with warnings.catch_warnings():\n",
    "    warnings.simplefilter('ignore')  # Hide FITS warnings\n",
    "    imviz.load_data(acs_47tuc_1, data_label='acs_47tuc_1')\n",
    "    imviz.load_data(acs_47tuc_2, data_label='acs_47tuc_2')\n",
    "\n",
    "# These are dithered, so we re-link by WCS.\n",
    "imviz.link_data(link_type='wcs')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b9210d6",
   "metadata": {},
   "source": [
    "Or we can load plain Numpy array without WCS or unit."
   ]
  },
  {
   "cell_type": "raw",
   "id": "54dc3ef7",
   "metadata": {},
   "source": [
    "import numpy as np\n",
    "from astropy.modeling.models import Gaussian2D\n",
    "\n",
    "gm = Gaussian2D(100, 25, 25, 5, 5)\n",
    "y, x = np.mgrid[0:51, 0:51]\n",
    "arr = gm(x, y)\n",
    "\n",
    "my_aper = CirclePixelRegion(center=PixCoord(x=25, y=25), radius=10)\n",
    "my_bg = RectanglePixelRegion(center=PixCoord(x=45, y=30), width=6, height=6)\n",
    "my_zoom = 'fit'\n",
    "\n",
    "imviz.load_data(arr, data_label='my_gaussian')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07d23b82",
   "metadata": {},
   "source": [
    "Display the app."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "610b86ac-d6da-43df-8855-3963391dab4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a0059f8b99bb45b28f84c4e761fbf452",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Application(config='imviz', docs_link='https://jdaviz.readthedocs.io/en/v3.10.1/imviz/index.html', events=['caâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "imviz.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e973760-7843-49ce-987b-1b84d5d6eb0a",
   "metadata": {},
   "source": [
    "Now, we would zoom in on a star and draw an aperture."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5f763388-64f5-4fbe-b910-07f52b327329",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Viewer is still loading, try again later",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[12], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m viewer \u001b[38;5;241m=\u001b[39m imviz\u001b[38;5;241m.\u001b[39mdefault_viewer\n\u001b[1;32m      2\u001b[0m viewer\u001b[38;5;241m.\u001b[39mcenter_on(my_aper\u001b[38;5;241m.\u001b[39mcenter\u001b[38;5;241m.\u001b[39mxy)\n\u001b[0;32m----> 3\u001b[0m \u001b[43mviewer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mzoom_level\u001b[49m \u001b[38;5;241m=\u001b[39m my_zoom\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Click on image to finalize selection.\u001b[39;00m\n\u001b[1;32m      6\u001b[0m imviz\u001b[38;5;241m.\u001b[39mload_regions([my_aper, my_bg])\n",
      "File \u001b[0;32m~/.brew/Caskroom/miniconda/base/envs/jdaviz-env/lib/python3.11/site-packages/jdaviz/core/user_api.py:170\u001b[0m, in \u001b[0;36mViewerUserApi.__setattr__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    168\u001b[0m     logging\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDeprecationWarning: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_deprecation_msg\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    169\u001b[0m     \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__setattr__\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m_deprecation_msg\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[0;32m--> 170\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__setattr__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.brew/Caskroom/miniconda/base/envs/jdaviz-env/lib/python3.11/site-packages/jdaviz/core/user_api.py:49\u001b[0m, in \u001b[0;36mUserApiWrapper.__setattr__\u001b[0;34m(self, attr, value)\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m attr \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_readonly:\n\u001b[1;32m     47\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcannot set read-only item\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m---> 49\u001b[0m exp_obj \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_obj, attr)\n\u001b[1;32m     50\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(exp_obj, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m__call__\u001b[39m\u001b[38;5;124m'\u001b[39m):\n\u001b[1;32m     51\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mattr\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is a callable, cannot set to a value.  See help(\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mattr\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m) for input arguments.\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# noqa\u001b[39;00m\n",
      "File \u001b[0;32m~/.brew/Caskroom/miniconda/base/envs/jdaviz-env/lib/python3.11/site-packages/jdaviz/core/astrowidgets_api.py:183\u001b[0m, in \u001b[0;36mAstrowidgetsImageViewerMixin.zoom_level\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    169\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    170\u001b[0m \u001b[38;5;124;03mThe zoom level for an image viewer (not linked by WCS).\u001b[39;00m\n\u001b[1;32m    171\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    180\u001b[0m \n\u001b[1;32m    181\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    182\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mshape \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:  \u001b[38;5;66;03m# pragma: no cover\u001b[39;00m\n\u001b[0;32m--> 183\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mViewer is still loading, try again later\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    185\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m_get_real_xy\u001b[39m\u001b[38;5;124m'\u001b[39m):\n\u001b[1;32m    186\u001b[0m     image, i_ref \u001b[38;5;241m=\u001b[39m get_reference_image_data(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mjdaviz_app, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreference)\n",
      "\u001b[0;31mValueError\u001b[0m: Viewer is still loading, try again later"
     ]
    }
   ],
   "source": [
    "time.sleep(15)\n",
    "\n",
    "viewer = imviz.default_viewer\n",
    "viewer.center_on(my_aper.center.xy)\n",
    "viewer.zoom_level = my_zoom\n",
    "\n",
    "# Click on image to finalize selection.\n",
    "imviz.load_regions([my_aper, my_bg])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9abeb637-dac2-4787-8087-3be5f54a5dd0",
   "metadata": {},
   "source": [
    "Now, use the \"Aperture Photometry\" plugin.\n",
    "\n",
    "Once photometry is done, we would do the following to extract the data from Imviz back to notebook for further processing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c3e6a27-bdf8-4881-8933-aa8c29e78163",
   "metadata": {},
   "outputs": [],
   "source": [
    "results = imviz.get_aperture_photometry_results()\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b45fcdfe",
   "metadata": {},
   "source": [
    "If you fitted Gaussian to radial profile, you can get it back out like this. If it does not exist, you will get `None`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcb594f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_gaussian = imviz.app.fitted_models.get('phot_radial_profile', None)\n",
    "my_gaussian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7c59fef",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
